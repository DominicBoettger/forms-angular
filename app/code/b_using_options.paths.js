{ findFunc: [Function],
  onSave: [Function],
  paths:
   { surname:
      { enumValues: [],
        regExp: null,
        path: 'surname',
        instance: 'String',
        validators: [Object],
        setters: [],
        getters: [],
        options: [Object],
        _index: true,
        isRequired: true,
        requiredValidator: [Function],
        enum: [Function],
        lowercase: [Function],
        uppercase: [Function],
        trim: [Function],
        match: [Function: match],
        checkRequired: [Function: checkRequired],
        cast: [Function],
        '$conditionalHandlers': [Object],
        castForQuery: [Function],
        default: [Function],
        index: [Function],
        unique: [Function],
        sparse: [Function],
        set: [Function],
        get: [Function],
        validate: [Function],
        required: [Function],
        getDefault: [Function],
        applySetters: [Function],
        applyGetters: [Function],
        select: [Function: select],
        doValidate: [Function] },
     forename:
      { enumValues: [],
        regExp: null,
        path: 'forename',
        instance: 'String',
        validators: [],
        setters: [],
        getters: [],
        options: [Object],
        _index: true,
        enum: [Function],
        lowercase: [Function],
        uppercase: [Function],
        trim: [Function],
        match: [Function: match],
        checkRequired: [Function: checkRequired],
        cast: [Function],
        '$conditionalHandlers': [Object],
        castForQuery: [Function],
        default: [Function],
        index: [Function],
        unique: [Function],
        sparse: [Function],
        set: [Function],
        get: [Function],
        validate: [Function],
        required: [Function],
        getDefault: [Function],
        applySetters: [Function],
        applyGetters: [Function],
        select: [Function: select],
        doValidate: [Function] },
     website:
      { enumValues: [],
        regExp: null,
        path: 'website',
        instance: 'String',
        validators: [],
        setters: [],
        getters: [],
        options: [Object],
        _index: null,
        enum: [Function],
        lowercase: [Function],
        uppercase: [Function],
        trim: [Function],
        match: [Function: match],
        checkRequired: [Function: checkRequired],
        cast: [Function],
        '$conditionalHandlers': [Object],
        castForQuery: [Function],
        default: [Function],
        index: [Function],
        unique: [Function],
        sparse: [Function],
        set: [Function],
        get: [Function],
        validate: [Function],
        required: [Function],
        getDefault: [Function],
        applySetters: [Function],
        applyGetters: [Function],
        select: [Function: select],
        doValidate: [Function] },
     login:
      { enumValues: [],
        regExp: null,
        path: 'login',
        instance: 'String',
        validators: [],
        setters: [],
        getters: [],
        options: [Object],
        _index: null,
        enum: [Function],
        lowercase: [Function],
        uppercase: [Function],
        trim: [Function],
        match: [Function: match],
        checkRequired: [Function: checkRequired],
        cast: [Function],
        '$conditionalHandlers': [Object],
        castForQuery: [Function],
        default: [Function],
        index: [Function],
        unique: [Function],
        sparse: [Function],
        set: [Function],
        get: [Function],
        validate: [Function],
        required: [Function],
        getDefault: [Function],
        applySetters: [Function],
        applyGetters: [Function],
        select: [Function: select],
        doValidate: [Function] },
     passwordHash:
      { enumValues: [],
        regExp: null,
        path: 'passwordHash',
        instance: 'String',
        validators: [],
        setters: [],
        getters: [],
        options: [Object],
        _index: null,
        enum: [Function],
        lowercase: [Function],
        uppercase: [Function],
        trim: [Function],
        match: [Function: match],
        checkRequired: [Function: checkRequired],
        cast: [Function],
        '$conditionalHandlers': [Object],
        castForQuery: [Function],
        default: [Function],
        index: [Function],
        unique: [Function],
        sparse: [Function],
        set: [Function],
        get: [Function],
        validate: [Function],
        required: [Function],
        getDefault: [Function],
        applySetters: [Function],
        applyGetters: [Function],
        select: [Function: select],
        doValidate: [Function] },
     'address.line1':
      { enumValues: [],
        regExp: null,
        path: 'address.line1',
        instance: 'String',
        validators: [],
        setters: [],
        getters: [],
        options: [Object],
        _index: null,
        enum: [Function],
        lowercase: [Function],
        uppercase: [Function],
        trim: [Function],
        match: [Function: match],
        checkRequired: [Function: checkRequired],
        cast: [Function],
        '$conditionalHandlers': [Object],
        castForQuery: [Function],
        default: [Function],
        index: [Function],
        unique: [Function],
        sparse: [Function],
        set: [Function],
        get: [Function],
        validate: [Function],
        required: [Function],
        getDefault: [Function],
        applySetters: [Function],
        applyGetters: [Function],
        select: [Function: select],
        doValidate: [Function] },
     'address.line2':
      { enumValues: [],
        regExp: null,
        path: 'address.line2',
        instance: 'String',
        validators: [],
        setters: [],
        getters: [],
        options: [Object],
        _index: null,
        enum: [Function],
        lowercase: [Function],
        uppercase: [Function],
        trim: [Function],
        match: [Function: match],
        checkRequired: [Function: checkRequired],
        cast: [Function],
        '$conditionalHandlers': [Object],
        castForQuery: [Function],
        default: [Function],
        index: [Function],
        unique: [Function],
        sparse: [Function],
        set: [Function],
        get: [Function],
        validate: [Function],
        required: [Function],
        getDefault: [Function],
        applySetters: [Function],
        applyGetters: [Function],
        select: [Function: select],
        doValidate: [Function] },
     'address.line3':
      { enumValues: [],
        regExp: null,
        path: 'address.line3',
        instance: 'String',
        validators: [],
        setters: [],
        getters: [],
        options: [Object],
        _index: null,
        enum: [Function],
        lowercase: [Function],
        uppercase: [Function],
        trim: [Function],
        match: [Function: match],
        checkRequired: [Function: checkRequired],
        cast: [Function],
        '$conditionalHandlers': [Object],
        castForQuery: [Function],
        default: [Function],
        index: [Function],
        unique: [Function],
        sparse: [Function],
        set: [Function],
        get: [Function],
        validate: [Function],
        required: [Function],
        getDefault: [Function],
        applySetters: [Function],
        applyGetters: [Function],
        select: [Function: select],
        doValidate: [Function] },
     'address.town':
      { enumValues: [],
        regExp: null,
        path: 'address.town',
        instance: 'String',
        validators: [],
        setters: [],
        getters: [],
        options: [Object],
        _index: null,
        enum: [Function],
        lowercase: [Function],
        uppercase: [Function],
        trim: [Function],
        match: [Function: match],
        checkRequired: [Function: checkRequired],
        cast: [Function],
        '$conditionalHandlers': [Object],
        castForQuery: [Function],
        default: [Function],
        index: [Function],
        unique: [Function],
        sparse: [Function],
        set: [Function],
        get: [Function],
        validate: [Function],
        required: [Function],
        getDefault: [Function],
        applySetters: [Function],
        applyGetters: [Function],
        select: [Function: select],
        doValidate: [Function] },
     'address.postcode':
      { enumValues: [],
        regExp: null,
        path: 'address.postcode',
        instance: 'String',
        validators: [Object],
        setters: [],
        getters: [],
        options: [Object],
        _index: null,
        enum: [Function],
        lowercase: [Function],
        uppercase: [Function],
        trim: [Function],
        match: [Function: match],
        checkRequired: [Function: checkRequired],
        cast: [Function],
        '$conditionalHandlers': [Object],
        castForQuery: [Function],
        default: [Function],
        index: [Function],
        unique: [Function],
        sparse: [Function],
        set: [Function],
        get: [Function],
        validate: [Function],
        required: [Function],
        getDefault: [Function],
        applySetters: [Function],
        applyGetters: [Function],
        select: [Function: select],
        doValidate: [Function] },
     'address.country':
      { enumValues: [],
        regExp: null,
        path: 'address.country',
        instance: 'String',
        validators: [],
        setters: [],
        getters: [],
        options: [Object],
        _index: null,
        enum: [Function],
        lowercase: [Function],
        uppercase: [Function],
        trim: [Function],
        match: [Function: match],
        checkRequired: [Function: checkRequired],
        cast: [Function],
        '$conditionalHandlers': [Object],
        castForQuery: [Function],
        default: [Function],
        index: [Function],
        unique: [Function],
        sparse: [Function],
        set: [Function],
        get: [Function],
        validate: [Function],
        required: [Function],
        getDefault: [Function],
        applySetters: [Function],
        applyGetters: [Function],
        select: [Function: select],
        doValidate: [Function] },
     'address.surveillance':
      { path: 'address.surveillance',
        instance: 'boolean',
        validators: [],
        setters: [],
        getters: [],
        options: [Object],
        _index: null,
        checkRequired: [Function],
        cast: [Function],
        castForQuery: [Function],
        default: [Function],
        index: [Function],
        unique: [Function],
        sparse: [Function],
        set: [Function],
        get: [Function],
        validate: [Function],
        required: [Function],
        getDefault: [Function],
        applySetters: [Function],
        applyGetters: [Function],
        select: [Function: select],
        doValidate: [Function] },
     eyeColour:
      { enumValues: [Object],
        regExp: null,
        path: 'eyeColour',
        instance: 'String',
        validators: [Object],
        setters: [],
        getters: [],
        options: [Object],
        _index: null,
        enumValidator: [Function],
        isRequired: false,
        enum: [Function],
        lowercase: [Function],
        uppercase: [Function],
        trim: [Function],
        match: [Function: match],
        checkRequired: [Function: checkRequired],
        cast: [Function],
        '$conditionalHandlers': [Object],
        castForQuery: [Function],
        default: [Function],
        index: [Function],
        unique: [Function],
        sparse: [Function],
        set: [Function],
        get: [Function],
        validate: [Function],
        required: [Function],
        getDefault: [Function],
        applySetters: [Function],
        applyGetters: [Function],
        select: [Function: select],
        doValidate: [Function] },
     sex:
      { enumValues: [Object],
        regExp: null,
        path: 'sex',
        instance: 'String',
        validators: [Object],
        setters: [],
        getters: [],
        options: [Object],
        _index: null,
        enumValidator: [Function],
        enum: [Function],
        lowercase: [Function],
        uppercase: [Function],
        trim: [Function],
        match: [Function: match],
        checkRequired: [Function: checkRequired],
        cast: [Function],
        '$conditionalHandlers': [Object],
        castForQuery: [Function],
        default: [Function],
        index: [Function],
        unique: [Function],
        sparse: [Function],
        set: [Function],
        get: [Function],
        validate: [Function],
        required: [Function],
        getDefault: [Function],
        applySetters: [Function],
        applyGetters: [Function],
        select: [Function: select],
        doValidate: [Function] },
     dateOfBirth:
      { path: 'dateOfBirth',
        instance: 'Date',
        validators: [],
        setters: [],
        getters: [],
        options: [Object],
        _index: null,
        expires: [Function],
        checkRequired: [Function],
        cast: [Function],
        '$conditionalHandlers': [Object],
        castForQuery: [Function],
        default: [Function],
        index: [Function],
        unique: [Function],
        sparse: [Function],
        set: [Function],
        get: [Function],
        validate: [Function],
        required: [Function],
        getDefault: [Function],
        applySetters: [Function],
        applyGetters: [Function],
        select: [Function: select],
        doValidate: [Function] },
     accepted:
      { path: 'accepted',
        instance: 'boolean',
        validators: [Object],
        setters: [],
        getters: [],
        options: [Object],
        _index: null,
        isRequired: true,
        requiredValidator: [Function],
        checkRequired: [Function],
        cast: [Function],
        castForQuery: [Function],
        default: [Function],
        index: [Function],
        unique: [Function],
        sparse: [Function],
        set: [Function],
        get: [Function],
        validate: [Function],
        required: [Function],
        getDefault: [Function],
        applySetters: [Function],
        applyGetters: [Function],
        select: [Function: select],
        doValidate: [Function] },
     interviewScore:
      { path: 'interviewScore',
        instance: 'Number',
        validators: [],
        setters: [],
        getters: [],
        options: [Object],
        _index: null,
        checkRequired: [Function: checkRequired],
        min: [Function],
        max: [Function],
        cast: [Function],
        '$conditionalHandlers': [Object],
        castForQuery: [Function],
        default: [Function],
        index: [Function],
        unique: [Function],
        sparse: [Function],
        set: [Function],
        get: [Function],
        validate: [Function],
        required: [Function],
        getDefault: [Function],
        applySetters: [Function],
        applyGetters: [Function],
        select: [Function: select],
        doValidate: [Function] },
     freeText:
      { enumValues: [],
        regExp: null,
        path: 'freeText',
        instance: 'String',
        validators: [],
        setters: [],
        getters: [],
        options: [Object],
        _index: null,
        enum: [Function],
        lowercase: [Function],
        uppercase: [Function],
        trim: [Function],
        match: [Function: match],
        checkRequired: [Function: checkRequired],
        cast: [Function],
        '$conditionalHandlers': [Object],
        castForQuery: [Function],
        default: [Function],
        index: [Function],
        unique: [Function],
        sparse: [Function],
        set: [Function],
        get: [Function],
        validate: [Function],
        required: [Function],
        getDefault: [Function],
        applySetters: [Function],
        applyGetters: [Function],
        select: [Function: select],
        doValidate: [Function] },
     resizingText:
      { enumValues: [],
        regExp: null,
        path: 'resizingText',
        instance: 'String',
        validators: [],
        setters: [],
        getters: [],
        options: [Object],
        _index: null,
        enum: [Function],
        lowercase: [Function],
        uppercase: [Function],
        trim: [Function],
        match: [Function: match],
        checkRequired: [Function: checkRequired],
        cast: [Function],
        '$conditionalHandlers': [Object],
        castForQuery: [Function],
        default: [Function],
        index: [Function],
        unique: [Function],
        sparse: [Function],
        set: [Function],
        get: [Function],
        validate: [Function],
        required: [Function],
        getDefault: [Function],
        applySetters: [Function],
        applyGetters: [Function],
        select: [Function: select],
        doValidate: [Function] },
     formattedText:
      { enumValues: [],
        regExp: null,
        path: 'formattedText',
        instance: 'String',
        validators: [],
        setters: [],
        getters: [],
        options: [Object],
        _index: null,
        enum: [Function],
        lowercase: [Function],
        uppercase: [Function],
        trim: [Function],
        match: [Function: match],
        checkRequired: [Function: checkRequired],
        cast: [Function],
        '$conditionalHandlers': [Object],
        castForQuery: [Function],
        default: [Function],
        index: [Function],
        unique: [Function],
        sparse: [Function],
        set: [Function],
        get: [Function],
        validate: [Function],
        required: [Function],
        getDefault: [Function],
        applySetters: [Function],
        applyGetters: [Function],
        select: [Function: select],
        doValidate: [Function] },
     ipAddress:
      { enumValues: [],
        regExp: null,
        path: 'ipAddress',
        instance: 'String',
        validators: [],
        setters: [],
        getters: [],
        options: [Object],
        _index: null,
        enum: [Function],
        lowercase: [Function],
        uppercase: [Function],
        trim: [Function],
        match: [Function: match],
        checkRequired: [Function: checkRequired],
        cast: [Function],
        '$conditionalHandlers': [Object],
        castForQuery: [Function],
        default: [Function],
        index: [Function],
        unique: [Function],
        sparse: [Function],
        set: [Function],
        get: [Function],
        validate: [Function],
        required: [Function],
        getDefault: [Function],
        applySetters: [Function],
        applyGetters: [Function],
        select: [Function: select],
        doValidate: [Function] },
     password:
      { enumValues: [],
        regExp: null,
        path: 'password',
        instance: 'String',
        validators: [],
        setters: [],
        getters: [],
        options: [Object],
        _index: null,
        enum: [Function],
        lowercase: [Function],
        uppercase: [Function],
        trim: [Function],
        match: [Function: match],
        checkRequired: [Function: checkRequired],
        cast: [Function],
        '$conditionalHandlers': [Object],
        castForQuery: [Function],
        default: [Function],
        index: [Function],
        unique: [Function],
        sparse: [Function],
        set: [Function],
        get: [Function],
        validate: [Function],
        required: [Function],
        getDefault: [Function],
        applySetters: [Function],
        applyGetters: [Function],
        select: [Function: select],
        doValidate: [Function] },
     _id:
      { path: '_id',
        instance: 'ObjectID',
        validators: [],
        setters: [Object],
        getters: [],
        options: [Object],
        _index: null,
        defaultValue: [Function: defaultId],
        auto: [Function],
        checkRequired: [Function: checkRequired],
        cast: [Function],
        '$conditionalHandlers': [Object],
        castForQuery: [Function],
        default: [Function],
        index: [Function],
        unique: [Function],
        sparse: [Function],
        set: [Function],
        get: [Function],
        validate: [Function],
        required: [Function],
        getDefault: [Function],
        applySetters: [Function],
        applyGetters: [Function],
        select: [Function: select],
        doValidate: [Function] } },
  hide: [ 'login', 'passwordHash', 'address.surveillance' ],
  listFields:
   [ { field: 'surname', params: {} },
     { field: 'forename', params: true },
     { field: 'accepted', params: {} },
     { field: 'interviewScore', params: {} } ] }

